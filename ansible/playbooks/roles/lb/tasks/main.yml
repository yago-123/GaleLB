---
- name: Ensure apt is up to date and install necessary packages
  apt:
    update_cache: yes
    name:
      - make
      - protobuf-compiler
    state: present
  tags:
    - update
    - packages

- name: Create application directory
  file:
    path: "{{ app_dir }}"
    state: directory
    mode: '0755'
  tags:
    - directory

- name: Clone the repository
  git:
    repo: "{{ repo_url }}"
    dest: "{{ app_dir }}"
    version: "{{ branch }}"
    force: yes
    update: yes
  tags:
    - git

- name: Download and install Go binary
  block:
    - name: Check if Go is installed
      stat:
        path: "/usr/local/go/bin/go"
      register: go_installed

    - name: Download Go binary if not installed
      get_url:
        url: "https://go.dev/dl/go{{ go_version }}.linux-amd64.tar.gz"
        dest: "/tmp/go{{ go_version }}.linux-amd64.tar.gz"
      when: not go_installed.stat.exists

    - name: Extract Go binary if not installed
      unarchive:
        src: "/tmp/go{{ go_version }}.linux-amd64.tar.gz"
        dest: "/usr/local"
        remote_src: yes
      when: not go_installed.stat.exists
  tags:
    - go

- name: Install Go tools
  block:
    - name: Check if protoc-gen-go is installed
      shell: "which protoc-gen-go"
      register: protoc_gen_go_installed
      ignore_errors: yes

    - name: Install protoc-gen-go tool if not installed
      shell: "go install google.golang.org/protobuf/cmd/protoc-gen-go@latest"
      when: protoc_gen_go_installed.rc != 0

    - name: Check if protoc-gen-go-grpc is installed
      shell: "which protoc-gen-go-grpc"
      register: protoc_gen_go_grpc_installed
      ignore_errors: yes

    - name: Install protoc-gen-go-grpc tool if not installed
      shell: "go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest"
      when: protoc_gen_go_grpc_installed.rc != 0
  environment:
    PATH: "/usr/local/go/bin"
  tags:
    - go-tools

- name: Install Clang 18 and llc if not present
  block:
    - name: Check if Clang is installed
      command: clang --version
      register: clang_installed
      ignore_errors: yes

    - name: Check if llc is installed
      command: llc --version
      register: llc_installed
      ignore_errors: yes

    - name: Add LLVM repository GPG key if Clang or llc is not installed
      apt_key:
        url: https://apt.llvm.org/llvm-snapshot.gpg.key
        state: present
      when: clang_installed.rc != 0 or llc_installed.rc != 0

    - name: Add LLVM repository if Clang or llc is not installed
      apt_repository:
        repo: "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main"
        state: present
        filename: "llvm"
      when: clang_installed.rc != 0 or llc_installed.rc != 0

    - name: Install Clang 18 and llvm-18 if not installed
      apt:
        name:
          - clang-18
          - llvm-18
        state: present
      when: clang_installed.rc != 0 or llc_installed.rc != 0

    - name: Create symbolic link for clang to clang-18
      file:
        src: "/usr/bin/clang-18"
        dest: "/usr/bin/clang"
        state: link
      when: clang_installed.rc != 0

    - name: Create symbolic link for llc to llc-18
      file:
        src: "/usr/bin/llc-18"
        dest: "/usr/bin/llc"
        state: link
      when: llc_installed.rc != 0

  tags:
    - clang
    - llc

- name: Install linux headers
  become: yes
  shell: |
    sudo apt-get update
    sudo apt-get install -y linux-headers-$(uname -r) build-essential
  tags:
    - linux-headers

- name: Get the current kernel version
  become: yes
  command: uname -r
  register: kernel_version

- name: Check if /usr/include/linux exists
  become: yes
  stat:
    path: /usr/include/linux
  register: linux_dir

- name: Install libbpf-dev
  become: yes
  apt:
    name: libbpf-dev
    state: present
    update_cache: yes

- name: Create symlink for /usr/include/linux based on current kernel version
  become: yes
  file:
    src: "/usr/src/linux-headers-{{ kernel_version.stdout }}/include/linux"
    dest: /usr/include/linux
    state: link
  when: not linux_dir.stat.exists

- name: Check if {{ app_dir }}/pkg/routing/xdp_obj exists
  stat:
    path: "{{ app_dir }}/pkg/routing/xdp_obj"
  register: xdp_obj_stat

- name: Create {{ app_dir }}/pkg/routing/xdp_obj if it doesn't exist
  file:
    path: "{{ app_dir }}/pkg/routing/xdp_obj"
    state: directory
    mode: '0755'
  when: not xdp_obj_stat.stat.exists

- name: Build the application with make
  shell: make lb
  args:
    chdir: "{{ app_dir }}"
  environment:
    PATH: "/usr/bin:{{ ansible_env.PATH }}:/usr/local/go/bin:{{ ansible_env.HOME }}/go/bin"
  tags:
    - build

- name: Copy the configuration file
  copy:
    content: "{{ config_file_content }}"
    dest: "{{ app_dir }}/config.toml"
    mode: '0644'

- name: Create logging directory
  file:
    path: "/var/log/gale-lb"
    state: directory
    mode: '0755'
  tags:
    - directory

- name: Template systemd service file
  become: true
  template:
    src: "templates/systemd-lb.service.j2"
    dest: "/etc/systemd/system/gale-lb.service"
    mode: '0644'

- name: Reload systemd daemon
  command: systemctl daemon-reload

- name: Enable service
  become: true
  systemd:
    name: "gale-lb"
    enabled: yes

- name: Restart service
  become: true
  systemd:
    name: "gale-lb"
    state: restarted
